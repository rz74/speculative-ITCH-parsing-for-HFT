$date
	Tue Apr 29 15:38:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top $end
$var wire 32 ! add_order_shares [31:0] $end
$var wire 1 " cancel_order_valid_flag $end
$var wire 1 # clk $end
$var wire 1 $ delete_order_valid_flag $end
$var wire 1 % in_valid $end
$var wire 8 & msg_type [7:0] $end
$var wire 512 ' payload [511:0] $end
$var wire 32 ( replace_order_shares [31:0] $end
$var wire 1 ) replace_order_valid_flag $end
$var wire 1 * rst_n $end
$var wire 64 + stock_symbol [63:0] $end
$var wire 1 , replace_order_decoded $end
$var wire 32 - price [31:0] $end
$var wire 64 . original_ref [63:0] $end
$var wire 64 / order_ref [63:0] $end
$var wire 64 0 new_ref [63:0] $end
$var wire 64 1 delete_order_ref [63:0] $end
$var wire 1 2 delete_order_decoded $end
$var wire 32 3 cancel_shares [31:0] $end
$var wire 64 4 cancel_order_ref [63:0] $end
$var wire 1 5 cancel_order_decoded $end
$var wire 1 6 buy_sell $end
$var wire 1 7 add_order_valid_flag $end
$var wire 1 8 add_order_decoded $end
$scope module dispatcher_inst $end
$var wire 1 " cancel_order_valid_flag $end
$var wire 1 # clk $end
$var wire 1 $ delete_order_valid_flag $end
$var wire 1 % in_valid $end
$var wire 8 9 msg_type [7:0] $end
$var wire 512 : payload [511:0] $end
$var wire 1 ) replace_order_valid_flag $end
$var wire 1 * rst_n $end
$var wire 32 ; shares [31:0] $end
$var wire 32 < shares_replace [31:0] $end
$var wire 64 = stock_symbol [63:0] $end
$var wire 1 , replace_order_decoded $end
$var wire 32 > price [31:0] $end
$var wire 64 ? original_ref [63:0] $end
$var wire 64 @ order_ref [63:0] $end
$var wire 64 A new_ref [63:0] $end
$var wire 64 B delete_order_ref [63:0] $end
$var wire 1 2 delete_order_decoded $end
$var wire 32 C cancel_shares [31:0] $end
$var wire 64 D cancel_order_ref [63:0] $end
$var wire 1 5 cancel_order_decoded $end
$var wire 1 6 buy_sell $end
$var wire 1 7 add_order_valid_flag $end
$var wire 1 8 add_order_decoded $end
$scope module u_add_order_decoder $end
$var wire 1 # clk $end
$var wire 512 E payload [511:0] $end
$var wire 1 * rst_n $end
$var wire 1 F valid $end
$var wire 1 7 valid_flag $end
$var wire 8 G msg_type [7:0] $end
$var reg 1 8 add_order_decoded $end
$var reg 1 6 buy_sell $end
$var reg 64 H order_ref [63:0] $end
$var reg 32 I price [31:0] $end
$var reg 32 J shares [31:0] $end
$var reg 64 K stock_symbol [63:0] $end
$scope module validator_inst $end
$var wire 1 F byte_valid $end
$var wire 1 # clk $end
$var wire 16 L expected_len [15:0] $end
$var wire 1 M length_error $end
$var wire 1 * rst_n $end
$var wire 1 F start $end
$var wire 1 7 valid_flag $end
$var reg 16 N byte_count [15:0] $end
$var reg 1 O error_flag $end
$var reg 1 P flag_done $end
$var reg 16 Q length_latched [15:0] $end
$upscope $end
$upscope $end
$scope module u_cancel_order_decoder $end
$var wire 1 # clk $end
$var wire 512 R payload [511:0] $end
$var wire 1 * rst_n $end
$var wire 1 S valid $end
$var wire 1 " valid_flag $end
$var wire 8 T msg_type [7:0] $end
$var reg 1 5 cancel_order_decoded $end
$var reg 64 U cancel_order_ref [63:0] $end
$var reg 32 V cancel_shares [31:0] $end
$upscope $end
$scope module u_delete_order_decoder $end
$var wire 1 # clk $end
$var wire 512 W payload [511:0] $end
$var wire 1 * rst_n $end
$var wire 1 X valid $end
$var wire 1 $ valid_flag $end
$var wire 64 Y order_ref [63:0] $end
$var wire 8 Z msg_type [7:0] $end
$var reg 1 2 delete_order_decoded $end
$var reg 64 [ delete_order_ref [63:0] $end
$upscope $end
$scope module u_replace_order_decoder $end
$var wire 1 # clk $end
$var wire 512 \ payload [511:0] $end
$var wire 1 * rst_n $end
$var wire 1 ] valid $end
$var wire 1 ) valid_flag $end
$var wire 8 ^ msg_type [7:0] $end
$var reg 64 _ new_ref [63:0] $end
$var reg 64 ` original_ref [63:0] $end
$var reg 1 , replace_order_decoded $end
$var reg 32 a shares [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a
bx `
bx _
bz ^
x]
bz \
bx [
bz Z
bz Y
xX
bz W
bx V
bx U
bz T
xS
bz R
bx Q
xP
xO
bx N
xM
b100100 L
bx K
bx J
bx I
bx H
bz G
xF
bz E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bz <
bx ;
bz :
bz 9
x8
x7
x6
x5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
z*
1)
bz (
bz '
bz &
z%
1$
z#
1"
bx !
$end
#1
