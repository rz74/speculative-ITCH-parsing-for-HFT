$date
	Tue May  6 19:56:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module parser $end
$var wire 1 ! add_internal_valid $end
$var wire 64 " add_order_ref [63:0] $end
$var wire 4 # add_parsed_type [3:0] $end
$var wire 32 $ add_price [31:0] $end
$var wire 32 % add_shares [31:0] $end
$var wire 1 & add_side $end
$var wire 64 ' add_stock_symbol [63:0] $end
$var wire 32 ( cancel_canceled_shares [31:0] $end
$var wire 1 ) cancel_internal_valid $end
$var wire 64 * cancel_order_ref [63:0] $end
$var wire 4 + cancel_parsed_type [3:0] $end
$var wire 1 , clk $end
$var wire 1 - delete_internal_valid $end
$var wire 64 . delete_order_ref [63:0] $end
$var wire 4 / delete_parsed_type [3:0] $end
$var wire 1 0 exec_internal_valid $end
$var wire 64 1 exec_match_id [63:0] $end
$var wire 64 2 exec_order_ref [63:0] $end
$var wire 4 3 exec_parsed_type [3:0] $end
$var wire 32 4 exec_shares [31:0] $end
$var wire 32 5 exec_timestamp [31:0] $end
$var wire 1 6 parsed_valid $end
$var wire 1 7 replace_internal_valid $end
$var wire 64 8 replace_new_order_ref [63:0] $end
$var wire 64 9 replace_old_order_ref [63:0] $end
$var wire 4 : replace_parsed_type [3:0] $end
$var wire 32 ; replace_price [31:0] $end
$var wire 32 < replace_shares [31:0] $end
$var wire 1 = rst $end
$var wire 1 > trade_internal_valid $end
$var wire 64 ? trade_match_id [63:0] $end
$var wire 64 @ trade_order_ref [63:0] $end
$var wire 4 A trade_parsed_type [3:0] $end
$var wire 32 B trade_price [31:0] $end
$var wire 32 C trade_shares [31:0] $end
$var wire 8 D trade_side [7:0] $end
$var wire 32 E trade_timestamp [31:0] $end
$var wire 32 F timestamp [31:0] $end
$var wire 1 G side $end
$var wire 32 H shares [31:0] $end
$var wire 64 I price [63:0] $end
$var wire 4 J parsed_type [3:0] $end
$var wire 64 K order_ref [63:0] $end
$var wire 64 L new_order_ref [63:0] $end
$var wire 64 M misc_data [63:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx M
bx L
bx K
bx J
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx I
bx H
xG
bx F
bz E
bz D
bz C
bz B
bz A
bz @
bz ?
z>
1=
bz <
bz ;
bz :
bz 9
bz 8
z7
x6
bz 5
bz 4
bz 3
bz 2
bz 1
z0
bz /
bz .
z-
1,
bz +
bz *
z)
bz (
bz '
z&
bz %
bz $
bz #
bz "
z!
$end
#5000
0,
#10000
0=
1,
#15000
0,
#20000
1,
#20001
