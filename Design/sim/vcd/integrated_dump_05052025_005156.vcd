$date
	Mon May  5 00:52:02 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module integrated $end
$var wire 8 ! byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 48 % trade_timestamp [47:0] $end
$var wire 64 & trade_stock_symbol [63:0] $end
$var wire 8 ' trade_side [7:0] $end
$var wire 32 ( trade_shares [31:0] $end
$var wire 32 ) trade_price [31:0] $end
$var wire 64 * trade_order_ref [63:0] $end
$var wire 64 + trade_match_id [63:0] $end
$var wire 1 , trade_internal_valid $end
$var wire 32 - replace_shares [31:0] $end
$var wire 32 . replace_price [31:0] $end
$var wire 64 / replace_old_order_ref [63:0] $end
$var wire 64 0 replace_new_order_ref [63:0] $end
$var wire 1 1 replace_internal_valid $end
$var wire 48 2 exec_timestamp [47:0] $end
$var wire 32 3 exec_shares [31:0] $end
$var wire 64 4 exec_order_ref [63:0] $end
$var wire 64 5 exec_match_id [63:0] $end
$var wire 1 6 exec_internal_valid $end
$var wire 64 7 delete_order_ref [63:0] $end
$var wire 1 8 delete_internal_valid $end
$var wire 1 9 cancel_packet_invalid $end
$var wire 64 : cancel_order_ref [63:0] $end
$var wire 1 ; cancel_internal_valid $end
$var wire 32 < cancel_canceled_shares [31:0] $end
$var wire 64 = add_stock_symbol [63:0] $end
$var wire 1 > add_side $end
$var wire 32 ? add_shares [31:0] $end
$var wire 32 @ add_price [31:0] $end
$var wire 1 A add_packet_invalid $end
$var wire 64 B add_order_ref [63:0] $end
$var wire 1 C add_internal_valid $end
$scope module u_add $end
$var wire 8 D byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 E decoder_enabled $end
$var reg 1 C add_internal_valid $end
$var reg 64 F add_order_ref [63:0] $end
$var reg 1 A add_packet_invalid $end
$var reg 32 G add_price [31:0] $end
$var reg 32 H add_shares [31:0] $end
$var reg 1 > add_side $end
$var reg 64 I add_stock_symbol [63:0] $end
$var reg 6 J byte_index [5:0] $end
$var reg 1 K is_add_order $end
$var reg 6 L suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_cancel $end
$var wire 8 M byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 N decoder_enabled $end
$var reg 6 O byte_index [5:0] $end
$var reg 32 P cancel_canceled_shares [31:0] $end
$var reg 1 ; cancel_internal_valid $end
$var reg 64 Q cancel_order_ref [63:0] $end
$var reg 1 9 cancel_packet_invalid $end
$var reg 1 R is_cancel_order $end
$var reg 6 S suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_delete_order_decoder $end
$var wire 8 T byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 U decoder_enabled $end
$var reg 6 V byte_index [5:0] $end
$var reg 1 8 delete_internal_valid $end
$var reg 64 W delete_order_ref [63:0] $end
$var reg 1 X delete_packet_invalid $end
$var reg 1 Y is_delete_order $end
$var reg 6 Z suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_executed_order_decoder $end
$var wire 8 [ byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 \ decoder_enabled $end
$var reg 6 ] byte_index [5:0] $end
$var reg 1 6 exec_internal_valid $end
$var reg 64 ^ exec_match_id [63:0] $end
$var reg 64 _ exec_order_ref [63:0] $end
$var reg 1 ` exec_packet_invalid $end
$var reg 32 a exec_shares [31:0] $end
$var reg 48 b exec_timestamp [47:0] $end
$var reg 1 c is_exec_order $end
$var reg 6 d suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_replace_order_decoder $end
$var wire 8 e byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 f decoder_enabled $end
$var reg 6 g byte_index [5:0] $end
$var reg 1 h is_replace_order $end
$var reg 1 1 replace_internal_valid $end
$var reg 64 i replace_new_order_ref [63:0] $end
$var reg 64 j replace_old_order_ref [63:0] $end
$var reg 1 k replace_packet_invalid $end
$var reg 32 l replace_price [31:0] $end
$var reg 32 m replace_shares [31:0] $end
$var reg 6 n suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_trade_decoder $end
$var wire 8 o byte_in [7:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ valid_in $end
$var wire 1 p decoder_enabled $end
$var reg 6 q byte_index [5:0] $end
$var reg 1 r is_trade $end
$var reg 6 s suppress_count [5:0] $end
$var reg 1 , trade_internal_valid $end
$var reg 64 t trade_match_id [63:0] $end
$var reg 64 u trade_order_ref [63:0] $end
$var reg 1 v trade_packet_invalid $end
$var reg 32 w trade_price [31:0] $end
$var reg 32 x trade_shares [31:0] $end
$var reg 8 y trade_side [7:0] $end
$var reg 64 z trade_stock_symbol [63:0] $end
$var reg 48 { trade_timestamp [47:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 {
b0 z
b0 y
b0 x
b0 w
0v
b0 u
b0 t
b0 s
0r
b0 q
1p
bz o
b0 n
b0 m
b0 l
0k
b0 j
b0 i
0h
b0 g
1f
bz e
b0 d
0c
b0 b
b0 a
0`
b0 _
b0 ^
b0 ]
1\
bz [
b0 Z
0Y
0X
b0 W
b0 V
1U
bz T
b0 S
0R
b0 Q
b0 P
b0 O
1N
bz M
b0 L
0K
b0 J
b0 I
b0 H
b0 G
b0 F
1E
bz D
0C
b0 B
0A
b0 @
b0 ?
0>
b0 =
b0 <
0;
b0 :
09
08
b0 7
06
b0 5
b0 4
b0 3
b0 2
01
b0 0
b0 /
b0 .
b0 -
0,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
z$
1#
1"
bz !
$end
#5000
0"
#10000
0#
1"
#15000
0"
#20000
1"
#20001
