$date
	Wed May  7 01:26:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_wrapper $end
$scope module u_parser $end
$var wire 1 ! add_internal_valid $end
$var wire 64 " add_order_ref [63:0] $end
$var wire 4 # add_parsed_type [3:0] $end
$var wire 32 $ add_price [31:0] $end
$var wire 32 % add_shares [31:0] $end
$var wire 1 & add_side $end
$var wire 64 ' add_stock_symbol [63:0] $end
$var wire 32 ( cancel_canceled_shares [31:0] $end
$var wire 1 ) cancel_internal_valid $end
$var wire 64 * cancel_order_ref [63:0] $end
$var wire 4 + cancel_parsed_type [3:0] $end
$var wire 1 , clk $end
$var wire 1 - delete_internal_valid $end
$var wire 64 . delete_order_ref [63:0] $end
$var wire 4 / delete_parsed_type [3:0] $end
$var wire 1 0 exec_internal_valid $end
$var wire 64 1 exec_match_id [63:0] $end
$var wire 64 2 exec_order_ref [63:0] $end
$var wire 4 3 exec_parsed_type [3:0] $end
$var wire 32 4 exec_shares [31:0] $end
$var wire 48 5 exec_timestamp [47:0] $end
$var wire 1 6 is_add_order $end
$var wire 1 7 is_cancel_order $end
$var wire 1 8 is_delete_order $end
$var wire 1 9 is_exec_order $end
$var wire 1 : is_replace_order $end
$var wire 1 ; is_trade $end
$var wire 1 < parsed_valid $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 48 ? trade_timestamp [47:0] $end
$var wire 1 @ trade_side $end
$var wire 32 A trade_shares [31:0] $end
$var wire 32 B trade_price [31:0] $end
$var wire 4 C trade_parsed_type [3:0] $end
$var wire 64 D trade_order_ref [63:0] $end
$var wire 64 E trade_match_id [63:0] $end
$var wire 1 F trade_internal_valid $end
$var wire 48 G timestamp [47:0] $end
$var wire 1 H side $end
$var wire 32 I shares [31:0] $end
$var wire 32 J replace_shares [31:0] $end
$var wire 32 K replace_price [31:0] $end
$var wire 4 L replace_parsed_type [3:0] $end
$var wire 64 M replace_old_order_ref [63:0] $end
$var wire 64 N replace_new_order_ref [63:0] $end
$var wire 1 O replace_internal_valid $end
$var wire 32 P price [31:0] $end
$var wire 4 Q parsed_type [3:0] $end
$var wire 64 R order_ref [63:0] $end
$var wire 64 S new_order_ref [63:0] $end
$var wire 64 T misc_data [63:0] $end
$var wire 1 U is_one_hot_start $end
$var wire 6 V decoder_active [5:0] $end
$var reg 6 W decoder_active_latched [5:0] $end
$upscope $end
$upscope $end
$scope module test_wrapper $end
$var wire 8 X byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 48 Y trade_timestamp [47:0] $end
$var wire 64 Z trade_stock_symbol [63:0] $end
$var wire 1 @ trade_side $end
$var wire 32 [ trade_shares [31:0] $end
$var wire 32 \ trade_price [31:0] $end
$var wire 4 ] trade_parsed_type [3:0] $end
$var wire 64 ^ trade_order_ref [63:0] $end
$var wire 64 _ trade_match_id [63:0] $end
$var wire 1 F trade_internal_valid $end
$var wire 48 ` timestamp [47:0] $end
$var wire 1 H side $end
$var wire 32 a shares [31:0] $end
$var wire 32 b replace_shares [31:0] $end
$var wire 32 c replace_price [31:0] $end
$var wire 4 d replace_parsed_type [3:0] $end
$var wire 64 e replace_old_order_ref [63:0] $end
$var wire 64 f replace_new_order_ref [63:0] $end
$var wire 1 O replace_internal_valid $end
$var wire 32 g price [31:0] $end
$var wire 1 < parsed_valid $end
$var wire 4 h parsed_type [3:0] $end
$var wire 64 i order_ref [63:0] $end
$var wire 64 j new_order_ref [63:0] $end
$var wire 64 k misc_data [63:0] $end
$var wire 48 l exec_timestamp [47:0] $end
$var wire 32 m exec_shares [31:0] $end
$var wire 4 n exec_parsed_type [3:0] $end
$var wire 64 o exec_order_ref [63:0] $end
$var wire 64 p exec_match_id [63:0] $end
$var wire 1 0 exec_internal_valid $end
$var wire 4 q delete_parsed_type [3:0] $end
$var wire 64 r delete_order_ref [63:0] $end
$var wire 1 - delete_internal_valid $end
$var wire 4 s cancel_parsed_type [3:0] $end
$var wire 64 t cancel_order_ref [63:0] $end
$var wire 1 ) cancel_internal_valid $end
$var wire 32 u cancel_canceled_shares [31:0] $end
$var wire 64 v add_stock_symbol [63:0] $end
$var wire 1 & add_side $end
$var wire 32 w add_shares [31:0] $end
$var wire 32 x add_price [31:0] $end
$var wire 4 y add_parsed_type [3:0] $end
$var wire 64 z add_order_ref [63:0] $end
$var wire 1 ! add_internal_valid $end
$var reg 1 6 is_add_order $end
$var reg 1 7 is_cancel_order $end
$var reg 1 8 is_delete_order $end
$var reg 1 9 is_exec_order $end
$var reg 1 : is_replace_order $end
$var reg 1 ; is_trade $end
$scope module u_add $end
$var wire 8 { byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 | decoder_enabled $end
$var reg 1 ! add_internal_valid $end
$var reg 64 } add_order_ref [63:0] $end
$var reg 1 ~ add_packet_invalid $end
$var reg 4 !" add_parsed_type [3:0] $end
$var reg 32 "" add_price [31:0] $end
$var reg 32 #" add_shares [31:0] $end
$var reg 1 & add_side $end
$var reg 64 $" add_stock_symbol [63:0] $end
$var reg 6 %" byte_index [5:0] $end
$var reg 1 &" is_add_order $end
$var reg 6 '" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_cancel $end
$var wire 8 (" byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 )" decoder_enabled $end
$var reg 6 *" byte_index [5:0] $end
$var reg 32 +" cancel_canceled_shares [31:0] $end
$var reg 1 ) cancel_internal_valid $end
$var reg 64 ," cancel_order_ref [63:0] $end
$var reg 1 -" cancel_packet_invalid $end
$var reg 4 ." cancel_parsed_type [3:0] $end
$var reg 1 /" is_cancel_order $end
$var reg 6 0" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_delete $end
$var wire 8 1" byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 2" decoder_enabled $end
$var reg 6 3" byte_index [5:0] $end
$var reg 1 - delete_internal_valid $end
$var reg 64 4" delete_order_ref [63:0] $end
$var reg 1 5" delete_packet_invalid $end
$var reg 4 6" delete_parsed_type [3:0] $end
$var reg 1 7" is_delete_order $end
$var reg 6 8" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_exec $end
$var wire 8 9" byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 :" decoder_enabled $end
$var reg 6 ;" byte_index [5:0] $end
$var reg 1 0 exec_internal_valid $end
$var reg 64 <" exec_match_id [63:0] $end
$var reg 64 =" exec_order_ref [63:0] $end
$var reg 1 >" exec_packet_invalid $end
$var reg 4 ?" exec_parsed_type [3:0] $end
$var reg 32 @" exec_shares [31:0] $end
$var reg 48 A" exec_timestamp [47:0] $end
$var reg 1 B" is_exec_order $end
$var reg 6 C" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_parser $end
$upscope $end
$scope module u_replace $end
$var wire 8 D" byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 E" decoder_enabled $end
$var reg 6 F" byte_index [5:0] $end
$var reg 1 G" is_replace_order $end
$var reg 1 O replace_internal_valid $end
$var reg 64 H" replace_new_order_ref [63:0] $end
$var reg 64 I" replace_old_order_ref [63:0] $end
$var reg 1 J" replace_packet_invalid $end
$var reg 4 K" replace_parsed_type [3:0] $end
$var reg 32 L" replace_price [31:0] $end
$var reg 32 M" replace_shares [31:0] $end
$var reg 6 N" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module u_trade $end
$var wire 8 O" byte_in [7:0] $end
$var wire 1 , clk $end
$var wire 1 = rst $end
$var wire 1 > valid_in $end
$var wire 1 P" decoder_enabled $end
$var reg 6 Q" byte_index [5:0] $end
$var reg 1 R" is_trade $end
$var reg 6 S" suppress_count [5:0] $end
$var reg 1 F trade_internal_valid $end
$var reg 64 T" trade_match_id [63:0] $end
$var reg 64 U" trade_order_ref [63:0] $end
$var reg 1 V" trade_packet_invalid $end
$var reg 4 W" trade_parsed_type [3:0] $end
$var reg 32 X" trade_price [31:0] $end
$var reg 32 Y" trade_shares [31:0] $end
$var reg 1 @ trade_side $end
$var reg 64 Z" trade_stock_symbol [63:0] $end
$var reg 48 [" trade_timestamp [47:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
0V"
b0 U"
b0 T"
b0 S"
0R"
b0 Q"
1P"
bz O"
b0 N"
b0 M"
b0 L"
b0 K"
0J"
b0 I"
b0 H"
0G"
b0 F"
1E"
bz D"
b0 C"
0B"
b0 A"
b0 @"
b0 ?"
0>"
b0 ="
b0 <"
b0 ;"
1:"
bz 9"
b0 8"
07"
b0 6"
05"
b0 4"
b0 3"
12"
bz 1"
b0 0"
0/"
b0 ."
0-"
b0 ,"
b0 +"
b0 *"
1)"
bz ("
b0 '"
0&"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
0~
b0 }
1|
bz {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
bz X
b0 W
bx V
0U
b0 T
b0 S
b0 R
b0 Q
b0 P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
0H
b0 G
0F
b0 E
b0 D
b0 C
b0 B
b0 A
0@
b0 ?
z>
1=
0<
x;
x:
x9
x8
x7
x6
b0 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
0-
1,
b0 +
b0 *
0)
b0 (
b0 '
0&
b0 %
b0 $
b0 #
b0 "
0!
$end
#5000
0,
#10000
0=
1,
#15000
0,
#20000
b1010101 X
b1010101 {
b1010101 ("
b1010101 1"
b1010101 9"
b1010101 D"
b1010101 O"
1>
1,
#25000
0,
#30000
b11101000 X
b11101000 {
b11101000 ("
b11101000 1"
b11101000 9"
b11101000 D"
b11101000 O"
xU
bx W
0P"
b11010 S"
0:"
b11010 C"
b1 F"
1G"
02"
b11010 8"
0)"
b11010 0"
0|
b11010 '"
1,
#35000
0,
#40000
b11100100 X
b11100100 {
b11100100 ("
b11100100 1"
b11100100 9"
b11100100 D"
b11100100 O"
b11001 '"
b11001 0"
b11001 8"
b100 L
b100 d
b100 K"
b1110100000000000000000000000000000000000000000000000000000000000 M
b1110100000000000000000000000000000000000000000000000000000000000 e
b1110100000000000000000000000000000000000000000000000000000000000 I"
b10 F"
b11001 C"
b11001 S"
1,
#45000
0,
#50000
b10101101 X
b10101101 {
b10101101 ("
b10101101 1"
b10101101 9"
b10101101 D"
b10101101 O"
b11000 S"
b11000 C"
b1110100011100100000000000000000000000000000000000000000000000000 M
b1110100011100100000000000000000000000000000000000000000000000000 e
b1110100011100100000000000000000000000000000000000000000000000000 I"
b11 F"
b11000 8"
b11000 0"
b11000 '"
1,
#55000
0,
#60000
b10111100 X
b10111100 {
b10111100 ("
b10111100 1"
b10111100 9"
b10111100 D"
b10111100 O"
b10111 '"
b10111 0"
b10111 8"
b1110100011100100101011010000000000000000000000000000000000000000 M
b1110100011100100101011010000000000000000000000000000000000000000 e
b1110100011100100101011010000000000000000000000000000000000000000 I"
b100 F"
b10111 C"
b10111 S"
1,
#65000
0,
#70000
b1101010 X
b1101010 {
b1101010 ("
b1101010 1"
b1101010 9"
b1101010 D"
b1101010 O"
b10110 S"
b10110 C"
b1110100011100100101011011011110000000000000000000000000000000000 M
b1110100011100100101011011011110000000000000000000000000000000000 e
b1110100011100100101011011011110000000000000000000000000000000000 I"
b101 F"
b10110 8"
b10110 0"
b10110 '"
1,
#75000
0,
#80000
b10110001 X
b10110001 {
b10110001 ("
b10110001 1"
b10110001 9"
b10110001 D"
b10110001 O"
b10101 '"
b10101 0"
b10101 8"
b1110100011100100101011011011110001101010000000000000000000000000 M
b1110100011100100101011011011110001101010000000000000000000000000 e
b1110100011100100101011011011110001101010000000000000000000000000 I"
b110 F"
b10101 C"
b10101 S"
1,
#85000
0,
#90000
b11001 X
b11001 {
b11001 ("
b11001 1"
b11001 9"
b11001 D"
b11001 O"
b10100 S"
b10100 C"
b1110100011100100101011011011110001101010101100010000000000000000 M
b1110100011100100101011011011110001101010101100010000000000000000 e
b1110100011100100101011011011110001101010101100010000000000000000 I"
b111 F"
b10100 8"
b10100 0"
b10100 '"
1,
#95000
0,
#100000
b10000000 X
b10000000 {
b10000000 ("
b10000000 1"
b10000000 9"
b10000000 D"
b10000000 O"
b10011 '"
b10011 0"
b10011 8"
b1110100011100100101011011011110001101010101100010001100100000000 M
b1110100011100100101011011011110001101010101100010001100100000000 e
b1110100011100100101011011011110001101010101100010001100100000000 I"
b1000 F"
b10011 C"
b10011 S"
1,
#105000
0,
#110000
b101001 X
b101001 {
b101001 ("
b101001 1"
b101001 9"
b101001 D"
b101001 O"
b10010 S"
b10010 C"
b1110100011100100101011011011110001101010101100010001100110000000 M
b1110100011100100101011011011110001101010101100010001100110000000 e
b1110100011100100101011011011110001101010101100010001100110000000 I"
b1001 F"
b10010 8"
b10010 0"
b10010 '"
1,
#115000
0,
#120000
b10111000 X
b10111000 {
b10111000 ("
b10111000 1"
b10111000 9"
b10111000 D"
b10111000 O"
b10001 '"
b10001 0"
b10001 8"
b10100100000000000000000000000000000000000000000000000000000000 N
b10100100000000000000000000000000000000000000000000000000000000 f
b10100100000000000000000000000000000000000000000000000000000000 H"
b1010 F"
b10001 C"
b10001 S"
1,
#125000
0,
#130000
b10 X
b10 {
b10 ("
b10 1"
b10 9"
b10 D"
b10 O"
b10000 S"
b10000 C"
b10100110111000000000000000000000000000000000000000000000000000 N
b10100110111000000000000000000000000000000000000000000000000000 f
b10100110111000000000000000000000000000000000000000000000000000 H"
b1011 F"
b10000 8"
b10000 0"
b10000 '"
1,
#135000
0,
#140000
b10000100 X
b10000100 {
b10000100 ("
b10000100 1"
b10000100 9"
b10000100 D"
b10000100 O"
b1111 '"
b1111 0"
b1111 8"
b10100110111000000000100000000000000000000000000000000000000000 N
b10100110111000000000100000000000000000000000000000000000000000 f
b10100110111000000000100000000000000000000000000000000000000000 H"
b1100 F"
b1111 C"
b1111 S"
1,
#145000
0,
#150000
b1100000 X
b1100000 {
b1100000 ("
b1100000 1"
b1100000 9"
b1100000 D"
b1100000 O"
b1110 S"
b1110 C"
b10100110111000000000101000010000000000000000000000000000000000 N
b10100110111000000000101000010000000000000000000000000000000000 f
b10100110111000000000101000010000000000000000000000000000000000 H"
b1101 F"
b1110 8"
b1110 0"
b1110 '"
1,
#155000
0,
#160000
b10000101 X
b10000101 {
b10000101 ("
b10000101 1"
b10000101 9"
b10000101 D"
b10000101 O"
b1101 '"
b1101 0"
b1101 8"
b10100110111000000000101000010001100000000000000000000000000000 N
b10100110111000000000101000010001100000000000000000000000000000 f
b10100110111000000000101000010001100000000000000000000000000000 H"
b1110 F"
b1101 C"
b1101 S"
1,
#165000
0,
#170000
b10001000 X
b10001000 {
b10001000 ("
b10001000 1"
b10001000 9"
b10001000 D"
b10001000 O"
b1100 S"
b1100 C"
b10100110111000000000101000010001100000100001010000000000000000 N
b10100110111000000000101000010001100000100001010000000000000000 f
b10100110111000000000101000010001100000100001010000000000000000 H"
b1111 F"
b1100 8"
b1100 0"
b1100 '"
1,
#175000
0,
#180000
b100 X
b100 {
b100 ("
b100 1"
b100 9"
b100 D"
b100 O"
b1011 '"
b1011 0"
b1011 8"
b10100110111000000000101000010001100000100001011000100000000000 N
b10100110111000000000101000010001100000100001011000100000000000 f
b10100110111000000000101000010001100000100001011000100000000000 H"
b10000 F"
b1011 C"
b1011 S"
1,
#185000
0,
#190000
b0 X
b0 {
b0 ("
b0 1"
b0 9"
b0 D"
b0 O"
b1010 S"
b1010 C"
b10100110111000000000101000010001100000100001011000100000000100 N
b10100110111000000000101000010001100000100001011000100000000100 f
b10100110111000000000101000010001100000100001011000100000000100 H"
b10001 F"
b1010 8"
b1010 0"
b1010 '"
1,
#195000
0,
#200000
b111 X
b111 {
b111 ("
b111 1"
b111 9"
b111 D"
b111 O"
b1001 '"
b1001 0"
b1001 8"
b10010 F"
b1001 C"
b1001 S"
1,
#205000
0,
#210000
b11000000 X
b11000000 {
b11000000 ("
b11000000 1"
b11000000 9"
b11000000 D"
b11000000 O"
b1000 S"
b1000 C"
b1110000000000000000 J
b1110000000000000000 b
b1110000000000000000 M"
b10011 F"
b1000 8"
b1000 0"
b1000 '"
1,
#215000
0,
#220000
b11100110 X
b11100110 {
b11100110 ("
b11100110 1"
b11100110 9"
b11100110 D"
b11100110 O"
b111 '"
b111 0"
b111 8"
b1111100000000000000 J
b1111100000000000000 b
b1111100000000000000 M"
b10100 F"
b111 C"
b111 S"
1,
#225000
0,
#230000
b0 X
b0 {
b0 ("
b0 1"
b0 9"
b0 D"
b0 O"
b110 S"
b110 C"
b1111100000011100110 J
b1111100000011100110 b
b1111100000011100110 M"
b10101 F"
b110 8"
b110 0"
b110 '"
1,
#235000
0,
#240000
b11 X
b11 {
b11 ("
b11 1"
b11 9"
b11 D"
b11 O"
b101 '"
b101 0"
b101 8"
b10110 F"
b101 C"
b101 S"
1,
#245000
0,
#250000
b11010110 X
b11010110 {
b11010110 ("
b11010110 1"
b11010110 9"
b11010110 D"
b11010110 O"
b100 S"
b100 C"
b110000000000000000 K
b110000000000000000 c
b110000000000000000 L"
b10111 F"
b100 8"
b100 0"
b100 '"
1,
#255000
0,
#260000
b11001111 X
b11001111 {
b11001111 ("
b11001111 1"
b11001111 9"
b11001111 D"
b11001111 O"
b11 '"
b11 0"
b11 8"
b111101011000000000 K
b111101011000000000 c
b111101011000000000 L"
b11000 F"
b11 C"
b11 S"
1,
#265000
0,
#270000
b0 X
b0 {
b0 ("
b0 1"
b0 9"
b0 D"
b0 O"
b10 S"
b10 C"
b111101011011001111 K
b111101011011001111 c
b111101011011001111 L"
b11001 F"
b10 8"
b10 0"
b10 '"
1,
#275000
0,
#280000
b1 '"
b1 0"
b1 8"
b11010 F"
b1 C"
b1 S"
1,
#285000
0,
#290000
b1010000 X
b1010000 {
b1010000 ("
b1010000 1"
b1010000 9"
b1010000 D"
b1010000 O"
b1110100011100100101011011011110001101010101100010001100110000000 T
b1110100011100100101011011011110001101010101100010001100110000000 k
b100 Q
b100 h
b111101011011001111 P
b111101011011001111 g
b1111100000011100110 I
b1111100000011100110 a
x<
b10100110111000000000101000010001100000100001011000100000000100 S
b10100110111000000000101000010001100000100001011000100000000100 j
1P"
b0 S"
1:"
b0 C"
1O
b11011 F"
12"
b0 8"
1)"
b0 0"
1|
b0 '"
1,
#295000
0,
#300000
b0 T
b0 k
b0 Q
b0 h
b0 P
b0 g
b0 I
b0 a
0<
b0 S
b0 j
0|
b100111 '"
0)"
b100111 0"
02"
b100111 8"
0E"
b100111 N"
0G"
b0 K
b0 c
b0 L"
b0 J
b0 b
b0 M"
b0 N
b0 f
b0 H"
b0 M
b0 e
b0 I"
b0 L
b0 d
b0 K"
0J"
0O
b0 F"
0:"
b100111 C"
b1 Q"
1R"
1,
#300001
