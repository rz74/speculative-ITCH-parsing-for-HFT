$date
	Thu May  8 02:01:34 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_wrapper $end
$var wire 48 ! timestamp [47:0] $end
$var wire 1 " side $end
$var wire 32 # shares [31:0] $end
$var wire 32 $ price [31:0] $end
$var wire 1 % parsed_valid $end
$var wire 4 & parsed_type [3:0] $end
$var wire 64 ' order_ref [63:0] $end
$var wire 64 ( new_order_ref [63:0] $end
$var wire 64 ) misc_data [63:0] $end
$var wire 1 * latched_valid $end
$var wire 4 + latched_type [3:0] $end
$var wire 48 , latched_timestamp [47:0] $end
$var wire 1 - latched_side $end
$var wire 32 . latched_shares [31:0] $end
$var wire 32 / latched_price [31:0] $end
$var wire 64 0 latched_order_ref [63:0] $end
$var wire 64 1 latched_new_order_ref [63:0] $end
$var wire 64 2 latched_misc_data [63:0] $end
$var reg 8 3 byte_in [7:0] $end
$var reg 1 4 clk $end
$var reg 1 5 rst $end
$var reg 1 6 valid_in $end
$scope module dut $end
$var wire 8 7 byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 8 internal_valid_any $end
$var wire 1 % parsed_valid $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 48 9 trade_timestamp [47:0] $end
$var wire 1 : trade_side $end
$var wire 32 ; trade_shares [31:0] $end
$var wire 32 < trade_price [31:0] $end
$var wire 4 = trade_parsed_type [3:0] $end
$var wire 64 > trade_order_ref [63:0] $end
$var wire 64 ? trade_match_id [63:0] $end
$var wire 1 @ trade_internal_valid $end
$var wire 48 A timestamp [47:0] $end
$var wire 1 " side $end
$var wire 32 B shares [31:0] $end
$var wire 32 C replace_shares [31:0] $end
$var wire 32 D replace_price [31:0] $end
$var wire 4 E replace_parsed_type [3:0] $end
$var wire 64 F replace_old_order_ref [63:0] $end
$var wire 64 G replace_new_order_ref [63:0] $end
$var wire 1 H replace_internal_valid $end
$var wire 32 I price [31:0] $end
$var wire 4 J parsed_type [3:0] $end
$var wire 64 K order_ref [63:0] $end
$var wire 1 L onehot_detect $end
$var wire 64 M new_order_ref [63:0] $end
$var wire 64 N misc_data [63:0] $end
$var wire 48 O exec_timestamp [47:0] $end
$var wire 32 P exec_shares [31:0] $end
$var wire 4 Q exec_parsed_type [3:0] $end
$var wire 64 R exec_order_ref [63:0] $end
$var wire 64 S exec_match_id [63:0] $end
$var wire 1 T exec_internal_valid $end
$var wire 4 U delete_parsed_type [3:0] $end
$var wire 64 V delete_order_ref [63:0] $end
$var wire 1 W delete_internal_valid $end
$var wire 4 X cancel_parsed_type [3:0] $end
$var wire 64 Y cancel_order_ref [63:0] $end
$var wire 1 Z cancel_internal_valid $end
$var wire 32 [ cancel_canceled_shares [31:0] $end
$var wire 64 \ add_stock_symbol [63:0] $end
$var wire 1 ] add_side $end
$var wire 32 ^ add_shares [31:0] $end
$var wire 32 _ add_price [31:0] $end
$var wire 4 ` add_parsed_type [3:0] $end
$var wire 64 a add_order_ref [63:0] $end
$var wire 1 b add_internal_valid $end
$scope module add_dec $end
$var wire 8 c byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 d decoder_enabled $end
$var reg 1 b add_internal_valid $end
$var reg 64 e add_order_ref [63:0] $end
$var reg 1 f add_packet_invalid $end
$var reg 4 g add_parsed_type [3:0] $end
$var reg 32 h add_price [31:0] $end
$var reg 32 i add_shares [31:0] $end
$var reg 1 ] add_side $end
$var reg 64 j add_stock_symbol [63:0] $end
$var reg 6 k byte_index [5:0] $end
$var reg 1 l is_add_order $end
$var reg 6 m suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module cancel_dec $end
$var wire 8 n byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 o decoder_enabled $end
$var reg 6 p byte_index [5:0] $end
$var reg 32 q cancel_canceled_shares [31:0] $end
$var reg 1 Z cancel_internal_valid $end
$var reg 64 r cancel_order_ref [63:0] $end
$var reg 1 s cancel_packet_invalid $end
$var reg 4 t cancel_parsed_type [3:0] $end
$var reg 1 u is_cancel_order $end
$var reg 6 v suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module delete_dec $end
$var wire 8 w byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 x decoder_enabled $end
$var reg 6 y byte_index [5:0] $end
$var reg 1 W delete_internal_valid $end
$var reg 64 z delete_order_ref [63:0] $end
$var reg 1 { delete_packet_invalid $end
$var reg 4 | delete_parsed_type [3:0] $end
$var reg 1 } is_delete_order $end
$var reg 6 ~ suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module exec_dec $end
$var wire 8 !" byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 "" decoder_enabled $end
$var reg 6 #" byte_index [5:0] $end
$var reg 1 T exec_internal_valid $end
$var reg 64 $" exec_match_id [63:0] $end
$var reg 64 %" exec_order_ref [63:0] $end
$var reg 1 &" exec_packet_invalid $end
$var reg 4 '" exec_parsed_type [3:0] $end
$var reg 32 (" exec_shares [31:0] $end
$var reg 48 )" exec_timestamp [47:0] $end
$var reg 1 *" is_exec_order $end
$var reg 6 +" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module replace_dec $end
$var wire 8 ," byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 -" decoder_enabled $end
$var reg 6 ." byte_index [5:0] $end
$var reg 1 /" is_replace_order $end
$var reg 1 H replace_internal_valid $end
$var reg 64 0" replace_new_order_ref [63:0] $end
$var reg 64 1" replace_old_order_ref [63:0] $end
$var reg 1 2" replace_packet_invalid $end
$var reg 4 3" replace_parsed_type [3:0] $end
$var reg 32 4" replace_price [31:0] $end
$var reg 32 5" replace_shares [31:0] $end
$var reg 6 6" suppress_count [5:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$scope module trade_dec $end
$var wire 8 7" byte_in [7:0] $end
$var wire 1 4 clk $end
$var wire 1 5 rst $end
$var wire 1 6 valid_in $end
$var wire 1 8" decoder_enabled $end
$var reg 6 9" byte_index [5:0] $end
$var reg 1 :" is_trade $end
$var reg 6 ;" suppress_count [5:0] $end
$var reg 1 @ trade_internal_valid $end
$var reg 64 <" trade_match_id [63:0] $end
$var reg 64 =" trade_order_ref [63:0] $end
$var reg 1 >" trade_packet_invalid $end
$var reg 4 ?" trade_parsed_type [3:0] $end
$var reg 32 @" trade_price [31:0] $end
$var reg 32 A" trade_shares [31:0] $end
$var reg 1 : trade_side $end
$var reg 64 B" trade_stock_symbol [63:0] $end
$var reg 48 C" trade_timestamp [47:0] $end
$scope function itch_length $end
$upscope $end
$upscope $end
$upscope $end
$scope module latch $end
$var wire 1 4 clk $end
$var wire 64 D" misc_data [63:0] $end
$var wire 64 E" new_order_ref [63:0] $end
$var wire 64 F" order_ref [63:0] $end
$var wire 4 G" parsed_type [3:0] $end
$var wire 1 % parsed_valid $end
$var wire 32 H" price [31:0] $end
$var wire 1 5 rst $end
$var wire 32 I" shares [31:0] $end
$var wire 1 " side $end
$var wire 48 J" timestamp [47:0] $end
$var reg 64 K" latched_misc_data [63:0] $end
$var reg 64 L" latched_new_order_ref [63:0] $end
$var reg 64 M" latched_order_ref [63:0] $end
$var reg 32 N" latched_price [31:0] $end
$var reg 32 O" latched_shares [31:0] $end
$var reg 1 - latched_side $end
$var reg 48 P" latched_timestamp [47:0] $end
$var reg 4 Q" latched_type [3:0] $end
$var reg 1 * latched_valid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
0>"
b0 ="
b0 <"
b0 ;"
0:"
b0 9"
18"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
02"
b0 1"
b0 0"
0/"
b0 ."
1-"
b0 ,"
b0 +"
0*"
b0 )"
b0 ("
b0 '"
0&"
b0 %"
b0 $"
b0 #"
1""
b0 !"
b0 ~
0}
b0 |
0{
b0 z
b0 y
1x
b0 w
b0 v
0u
b0 t
0s
b0 r
b0 q
b0 p
1o
b0 n
b0 m
0l
b0 k
b0 j
b0 i
b0 h
b0 g
0f
b0 e
1d
b0 c
0b
b0 a
b0 `
b0 _
b0 ^
0]
b0 \
b0 [
0Z
b0 Y
b0 X
0W
b0 V
b0 U
0T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
b0 K
b0 J
b0 I
0H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
0@
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
b0 9
08
b0 7
06
15
14
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
0-
b0 ,
b0 +
0*
b0 )
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#5000
04
#10000
b1000100 3
b1000100 7
b1000100 c
b1000100 n
b1000100 w
b1000100 !"
b1000100 ,"
b1000100 7"
16
05
14
#15000
04
#20000
b1 3
b1 7
b1 c
b1 n
b1 w
b1 !"
b1 ,"
b1 7"
0d
b1000 m
0o
b1000 v
b1 y
1}
0-"
b1000 6"
0""
b1000 +"
08"
b1000 ;"
14
#25000
04
#30000
b10 3
b10 7
b10 c
b10 n
b10 w
b10 !"
b10 ,"
b10 7"
b111 ;"
b111 +"
b111 6"
b10 U
b10 |
b100000000000000000000000000000000000000000000000000000000 V
b100000000000000000000000000000000000000000000000000000000 z
b10 y
b111 v
b111 m
14
#35000
04
#40000
b11 3
b11 7
b11 c
b11 n
b11 w
b11 !"
b11 ,"
b11 7"
b110 m
b110 v
b100000010000000000000000000000000000000000000000000000000 V
b100000010000000000000000000000000000000000000000000000000 z
b11 y
b110 6"
b110 +"
b110 ;"
14
#45000
04
#50000
b0 3
b0 7
b0 c
b0 n
b0 w
b0 !"
b0 ,"
b0 7"
06
b101 ;"
b101 +"
b101 6"
b100000010000000110000000000000000000000000000000000000000 V
b100000010000000110000000000000000000000000000000000000000 z
b100 y
b101 v
b101 m
14
#55000
04
#60000
b1000100 3
b1000100 7
b1000100 c
b1000100 n
b1000100 w
b1000100 !"
b1000100 ,"
b1000100 7"
16
b100 m
b100 v
b0 y
1{
b100 6"
b100 +"
b100 ;"
14
#65000
04
#70000
b1 3
b1 7
b1 c
b1 n
b1 w
b1 !"
b1 ,"
b1 7"
b11 ;"
b11 +"
b11 6"
0{
b1 y
b11 v
b11 m
14
#75000
04
#80000
b10 3
b10 7
b10 c
b10 n
b10 w
b10 !"
b10 ,"
b10 7"
b10 m
b10 v
b10 y
b10 6"
b10 +"
b10 ;"
14
#85000
04
#90000
b11 3
b11 7
b11 c
b11 n
b11 w
b11 !"
b11 ,"
b11 7"
b1 ;"
b1 +"
b1 6"
b11 y
b1 v
b1 m
14
#95000
04
#100000
b100 3
b100 7
b100 c
b100 n
b100 w
b100 !"
b100 ,"
b100 7"
1d
b0 m
1o
b0 v
b100 y
1-"
b0 6"
1""
b0 +"
18"
b0 ;"
14
#105000
04
#110000
b101 3
b101 7
b101 c
b101 n
b101 w
b101 !"
b101 ,"
b101 7"
08"
b1 ;"
0""
b1 +"
0-"
b1 6"
b100000010000000110000010000000000000000000000000000000000 V
b100000010000000110000010000000000000000000000000000000000 z
b101 y
0o
b1 v
0d
b1 m
14
#115000
04
#120000
b110 3
b110 7
b110 c
b110 n
b110 w
b110 !"
b110 ,"
b110 7"
1d
b0 m
1o
b0 v
b100000010000000110000010000000101000000000000000000000000 V
b100000010000000110000010000000101000000000000000000000000 z
b110 y
1-"
b0 6"
1""
b0 +"
18"
b0 ;"
14
#125000
04
#130000
b111 3
b111 7
b111 c
b111 n
b111 w
b111 !"
b111 ,"
b111 7"
08"
b1 ;"
0""
b1 +"
0-"
b1 6"
b100000010000000110000010000000101000001100000000000000000 V
b100000010000000110000010000000101000001100000000000000000 z
b111 y
0o
b1 v
0d
b1 m
14
#135000
04
#140000
b1000 3
b1000 7
b1000 c
b1000 n
b1000 w
b1000 !"
b1000 ,"
b1000 7"
1d
b0 m
1o
b0 v
b100000010000000110000010000000101000001100000011100000000 V
b100000010000000110000010000000101000001100000011100000000 z
b1000 y
1-"
b0 6"
1""
b0 +"
18"
b0 ;"
14
#145000
04
#150000
b0 3
b0 7
b0 c
b0 n
b0 w
b0 !"
b0 ,"
b0 7"
06
1%
18
b100000010000000110000010000000101000001100000011100001000 '
b100000010000000110000010000000101000001100000011100001000 K
b100000010000000110000010000000101000001100000011100001000 F"
b10 &
b10 J
b10 G"
1L
08"
b1 ;"
0""
b1 +"
0-"
b1 6"
1W
b100000010000000110000010000000101000001100000011100001000 V
b100000010000000110000010000000101000001100000011100001000 z
b1001 y
0o
b1 v
0d
b1 m
14
#155000
04
#160000
08
b0 '
b0 K
b0 F"
b0 &
b0 J
b0 G"
0%
0L
1d
b0 m
1o
b0 v
b0 y
0}
b0 V
b0 z
b0 U
b0 |
0W
1{
1-"
b0 6"
1""
b0 +"
18"
b0 ;"
b100000010000000110000010000000101000001100000011100001000 0
b100000010000000110000010000000101000001100000011100001000 M"
b10 +
b10 Q"
1*
14
#165000
04
#170000
14
#175000
04
#180000
14
#180001
